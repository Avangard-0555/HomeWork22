# Поэтапный шаги
В терминале создаём виртуальное окружение:
python -m venv myenv

1)Активируем виртуальное окружение:
Для Windows:

myenv\Scripts\activate
____________________________---------------____________________
Для Mac/Linux:

source myenv/bin/activate
____________________________---------------____________________
2)После активации виртуального окружения установим Django:

pip install django

____________________________---------------________

2. Создание нового проекта Django
Теперь нужно создать новый проект и приложение в нём.

1)Создаём новый проект Django:

django-admin startproject myproject
______________________
2)Переходим в директорию проекта:

cd myproject
 _____________________
3)Создаём новое приложение для новостей:

python manage.py startapp news

3. Структура проекта
После выполнения этих команд у вас будет следующая структура каталогов:

myproject/
│
├── myproject/                # Корневая папка проекта
│   ├── __init__.py
│   ├── settings.py           # Настройки проекта
│   ├── urls.py               # URL конфигурация проекта
│   ├── asgi.py
│   └── wsgi.py
│
├── news/                     # Папка приложения (news)
│   ├── __init__.py
│   ├── admin.py              # Регистрация моделей в админке
│   ├── apps.py
│   ├── migrations/           # Миграции базы данных
│   ├── models.py             # Модели данных
│   ├── tests.py
│   ├── views.py              # Представления
│   └── urls.py               # URL конфигурация для новостей
│
├── db.sqlite3                # База данных SQLite (по умолчанию)
└── manage.py                 # Основной скрипт для управления проектом
----------------------------------

4. Настройка проекта
В settings.py:

Откройте файл myproject/settings.py. 
В разделе INSTALLED_APPS добавьте приложение news, 
чтобы Django знал о его существовании.

1) INSTALLED_APPS = [
    ...
    'news',  # добавляем наше приложение
]

----------------------------------
2)Настроим базу данных (по умолчанию будет использоваться 
                        SQLite, что подходит для разработки).

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
----------------------------------
3)Убедитесь, что настройки для статических файлов настроены 
(обычно они уже настроены по умолчанию).
В urls.py:

Откройте файл myproject/urls.py. 
Вставьте ссылку на ваше приложение:

from django.contrib import admin
from django.urls import path, include  # добавляем include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('news/', include('news.urls')),  # добавляем маршрут для новостей
]
----------------------------------

4)Создайте файл urls.py в папке вашего приложения news:

# news/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.news_list, name='news_list'),
]
----------------------------------

1)Миграции
Далее нужно создать таблицы в базе данных на основе ваших моделей. Для этого:

2)Выполните команду для создания миграций:

python manage.py makemigrations

3)Примените миграции для создания таблиц в базе данных:

python manage.py migrate

----------------------------------

Запуск сервера
Теперь можно запустить сервер и проверить, что проект работает:

Для запуска сервера выполните команду:

python manage.py runserver



----------------------------------




Перейдите в браузер и откройте адрес:
http://127.0.0.1:8000/ — на этом адресе будет работать ваш проект.
Перейдите по адресу 
http://127.0.0.1:8000/admin/ и войдите в админку, используя данные суперпользователя 
(если вы ещё не создали его, используйте команду python manage.py createsuperuser для создания).

----------------------------------

7. Дополнительные шаги
Если вы хотите работать с шаблонами, создайте папку templates внутри папки вашего приложения 
news и создайте там файл news_list.html. Это будет файл, в котором будут отображаться все новости.

Пример структуры папок будет выглядеть так:

news/
│
├── templates/
│   └── news_list.html



Шаблон можно будет использовать для отображения списка новостей, как я показывал в предыдущем ответе.

Резюме
Установите Python, Django и создайте виртуальное окружение.
Создайте новый проект и приложение Django.
Настройте проект, добавив модели, админку и представления.
Выполните миграции и запустите сервер.
Создайте суперпользователя для админки.















